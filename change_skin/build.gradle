apply plugin: 'com.android.library'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        // 开启MultiDex
        multiDexEnabled = true
        // change_skin模块 独立混淆
        consumerProguardFiles 'proguard-rules.pro'
    }
    buildTypes {
        //正式模式
        release {
            //正式模式
            buildConfigField "boolean", "IS_DEBUG", "false"
            //正式版构建时间
            buildConfigField "String", "buildTime", "\"" + getRealTime() + "\""

            //是否开启混淆
            minifyEnabled true
            //Zipalign优化
            zipAlignEnabled true
            // 移除无用的resource文件 (如果为true, 那么 getIdentifier(根据资源ID字符串获取资源) 可能获取不到(资源被删除了))
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        //调试模式
        debug {
            //调试模式
            buildConfigField "boolean", "IS_DEBUG", "true"
            //调试版构建时间
            buildConfigField "String", "buildTime", "\"" + getRealTime() + "\""

            // 是否开启混淆，开启之后不能debug
            minifyEnabled false
            //使用调试版签名配置签名
            signingConfig signingConfigs.debug
            //Zipalign优化
            zipAlignEnabled true
            // 移除无用的resource文件 (如果为true, 那么 getIdentifier(根据资源ID字符串获取资源) 可能获取不到(资源被删除了))
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'com.google.android.material:material:1.0.0'
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

//获取实时时间
private static def getRealTime() {
    return new Date().format("MMddHHmmss", TimeZone.getTimeZone("Asia/Beijing"))
}

