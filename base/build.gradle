apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
//会导致无法联网
//    buildToolsVersion rootProject.ext.android.buildToolsVersion
    defaultConfig {
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'

        //配置阿里 ARouter 路由
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }

//        ndk {
//            abiFilters "armeabi"
//        }
    }

    buildTypes {
        //正式模式
        release {
            //正式模式
            buildConfigField "boolean", "IS_DEBUG", "false"
            //正式版构建时间
            buildConfigField "String", "buildTime", "\"" + getRealTime() + "\""

            //是否开启混淆
            minifyEnabled false
            //Zipalign优化
            zipAlignEnabled true
            // 移除无用的resource文件
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        //调试模式
        debug {
            //调试模式
            buildConfigField "boolean", "IS_DEBUG", "true"
            //调试版构建时间
            buildConfigField "String", "buildTime", "\"" + getRealTime() + "\""

            // 是否开启混淆，开启之后不能debug
            minifyEnabled false
            //使用调试版签名配置签名
            signingConfig signingConfigs.debug
            //Zipalign优化
            zipAlignEnabled true
            // 移除无用的resource文件
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    //开启DataBinding (注意每个用到DataBinding的Module都需要打开) (用于 gradle tool 4.0 以上)
    buildFeatures{
        dataBinding = true
    }
    //Android Studio 4.0 以下 使用
    //开启DataBinding (注意每个用到DataBinding的Module都需要打开)
//    dataBinding {
//        enabled true
//    }
    //开启Java8
    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }
    // 解决问题 (Cannot inline bytecode built with JVM target 1.8 into bytecode that is being built with JVM target 1.6. Please specify proper '-jvm-target' option)
    kotlinOptions {
        jvmTarget = "1.8"
    }
    //支持 ViewHolder 中使用 Kotlin 的 findViewById 简写
    androidExtensions {
        experimental = true
    }
    //避免项目中存在相同的jar包，导致运行失败
    dexOptions {
        preDexLibraries = false
    }
    //出现错误的原因是：AndroidStudio严格审查png图片，就是png没有达到AndroidStudio的要求
    //注：最重要的就是.9图要严格要求做好。禁止Gradle检查PNG的合法性
    aaptOptions.cruncherEnabled = false
    aaptOptions.useNewCruncher = false

    //lint配置信息，这里主要是设置自定义lint检测后报告路径，LintOptions类型
    //命令行：gradlew lint      注意，studio自带lint检查，setting——> Inspection
//    lintOptions {
//        println("开始执行lint检测代码逻辑")
//        // 设置为 true，则当 Lint 发现错误时停止 Gradle 构建
//        //移除lint检测的error
//        abortOnError false
//        // 设置为 true，则当有错误时会显示文件的全路径或绝对路径 (默认情况下为true)
//        absolutePaths true
//        // 仅检查指定的问题（根据 id 指定）
//        check 'NewApi', 'InlinedApi'
//        // 设置为 true 则检查所有的问题，包括默认不检查问题
//        checkAllWarnings true
//        // 设置为 true 后，release 构建都会以 Fatal 的设置来运行 Lint。
//        // 如果构建时发现了致命（Fatal）的问题，会中止构建（具体由 abortOnError 控制）
//        checkReleaseBuilds true
//        // 不检查指定的问题（根据问题 id 指定）
//        disable 'TypographyFractions','TypographyQuotes'
//        // 检查指定的问题（根据 id 指定）
//        enable 'RtlHardcoded','RtlCompat', 'RtlEnabled'
//        // 在报告中是否返回对应的 Lint 说明
//        explainIssues true
//        // 写入报告的路径，默认为构建目录下的 lint-results.html
//        //htmlOutput file("lint-report.html")
//        // 设置为 true 则会生成一个 HTML 格式的报告
//        htmlReport true
//        // 设置为 true 则只报告错误
//        ignoreWarnings true
//        // 重新指定 Lint 规则配置文件
//        //lintConfig file("default-lint.xml")
//        // 设置为 true 则错误报告中不包括源代码的行号
//        noLines true
//        // 设置为 true 时 Lint 将不报告分析的进度
//        quiet true
//        // 设置为 true 则显示一个问题所在的所有地方，而不会截短列表
//        showAll true
//        // 配置写入输出结果的位置，格式可以是文件或 stdout
//        textOutput 'stdout'
//        // 设置为 true，则生成纯文本报告（默认为 false）
//        textReport false
//        // 设置为 true，则会把所有警告视为错误处理
//        warningsAsErrors true
//        // 写入检查报告的文件（不指定默认为 lint-results.xml）
//        //xmlOutput file("lint-report.xml")
//        // 设置为 true 则会生成一个 XML 报告
//        xmlReport false
//        // 将指定问题（根据 id 指定）的严重级别（severity）设置为 Fatal
//        fatal 'NewApi', 'InlineApi'
//        // 将指定问题（根据 id 指定）的严重级别（severity）设置为 HttpException
//        error 'Wakelock', 'TextViewEdits'
//        // 将指定问题（根据 id 指定）的严重级别（severity）设置为 Warning
//        warning 'ResourceAsColor'
//        // 将指定问题（根据 id 指定）的严重级别（severity）设置为 ignore
//        ignore 'TypographyQuotes'
//    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
}

dependencies {
    api fileTree(dir: 'libs', include: ['*.jar', '*.aar'])

    api rootProject.ext.kotlin["kotlin-stdlib-jdk7"]
    api rootProject.ext.kotlin["core-ktx"]
    api rootProject.ext.kotlin["kotlinx-coroutines-core"]
    api rootProject.ext.kotlin["kotlinx-coroutines-android"]

    api rootProject.ext.androidx["appcompat"]
    api rootProject.ext.androidx["junit"]
    api rootProject.ext.androidx["junit-ext"]
    api rootProject.ext.androidx["junit-espresso-core"]

    //MultiDex支持
    api rootProject.ext.androidx["multidex"]
    //ConstraintLayout约束布局
    api rootProject.ext.androidx["constraintlayout"]
    //Leak Canary 内存泄漏检测框架
    debugApi rootProject.ext.dependencies["leakcanary-android"]
//    debugApi rootProject.ext.dependencies["leakcanary-android-no-op"]
    //Design设计库
    api rootProject.ext.dependencies["material"]
    //Glide图片加载框架
    api rootProject.ext.dependencies["glide"]
    //Glide图片加载框架 注解执行器
    kapt rootProject.ext.annotationProcessor["glide"]
    //圆形图片加载框架
    api rootProject.ext.dependencies["circleimageview"]
    //查看大图框架
    api rootProject.ext.dependencies["PhotoView"]
    //LoadSir
    api rootProject.ext.dependencies["loadsir"]
    //SmartRefreshLayout
    api rootProject.ext.dependencies["smartrefresh"]
    //SmartRefreshLayout 特殊Header
    api rootProject.ext.dependencies["smartrefresh-header"]
    // ViewModel and LiveData
    api rootProject.ext.androidx["lifecycle-extensions"]
    // For Kotlin use kapt instead of annotationProcessor
    kapt rootProject.ext.androidx["lifecycle-compiler"]
    // if using Java8, use the following instead of lifecycle-compiler
    api rootProject.ext.androidx["lifecycle-common-java8"]
    // optional - ReactiveStreams support for LiveData
    api rootProject.ext.androidx["lifecycle-reactivestreams"]
    //Paging 分页加载
    api rootProject.ext.androidx["paging-runtime"]
    api rootProject.ext.androidx["paging-common"]
    //Gson  Json解析框架
    api rootProject.ext.dependencies["gson"]
    //OkHttp3 网络加载框架
    api rootProject.ext.dependencies["okhttp3"]
    //OkHttp3 日志插值器
    api rootProject.ext.dependencies["okhttp3-logging-interceptor"]
    //RxBinding JakeWharton响应式框架
    api rootProject.ext.dependencies["rxbinding3"]
    //RxPermission 响应式权限请求框架
    api rootProject.ext.dependencies["rxpermissions"]
    //动态切换 Retrofit BaseUrl 框架
    api rootProject.ext.dependencies["retrofit-url-manager"]
    //Retrofit2 OkHttp封装库
    api rootProject.ext.dependencies["retrofit2"]
    //Retrofit2 Gson转换器
    api rootProject.ext.dependencies["retrofit2-converter-gson"]
    //Retrofit2 RxJava2转换器
    api "com.squareup.retrofit2:adapter-rxjava2:2.7.1"
    //Retrofit2 协程转换器
    api rootProject.ext.dependencies["retrofit2-kotlin-coroutines-adapter"]
    //Retrofit2 协程转换器 的补充
    api rootProject.ext.dependencies["kotlin-coroutines-retrofit"]
    //RxJava2 异步加载框架
    api rootProject.ext.dependencies["rxjava2"]
    //RxAndroid 异步加载框架
    api rootProject.ext.dependencies["rxjava2-android"]
//    //RxLifecycle
//    api rootProject.ext.dependencies["rxlifecycle3"]
//    //RxLifecycle If you want to bind to Android-specific lifecycles
//    api rootProject.ext.dependencies["rxlifecycle3-android"]
//    //RxLifecycle If you want pre-written Activities and Fragments you can subclass as providers
//    api rootProject.ext.dependencies["rxlifecycle3-components"]
//    //RxLifecycle If you want to use Android Lifecycle for providers
//    api rootProject.ext.dependencies["rxlifecycle3-android-lifecycle"]
    //EventBus
    api rootProject.ext.dependencies["eventbus"]
    //万能工具类
    api rootProject.ext.dependencies["utilcodex"]
    //ARouter 路由框架
    api rootProject.ext.dependencies["arouter"]
    //ARouter 路由框架 注解执行器
    kapt rootProject.ext.annotationProcessor["arouter"]
}

//获取实时时间
static def getRealTime() {
    return new Date().format("MMddHHmmss", TimeZone.getTimeZone("Asia/Beijing"))
}

