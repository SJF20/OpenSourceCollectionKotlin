//从config.gradle中加载依赖配置版本
apply from: "config.gradle"

// ARouter路由表的自动加载
apply plugin: 'com.alibaba.arouter'

buildscript {
    ext {
        kotlin_version = '1.4.21'
    }

    // gradle脚本执行所需依赖仓库
    repositories {
        google()
        jcenter()
        maven { url "https://jitpack.io" }
        maven { url "https://maven.aliyun.com/nexus/content/repositories/releases" }
        maven { url 'https://dl.bintray.com/umsdk/release' }
        maven { url 'http://oss.jfrog.org/artifactory/oss-snapshot-local' }
        maven { url "http://maven.aliyun.com/nexus/content/repositories/releases" }
        //Bmob的maven仓库地址--必填
        maven { url 'https://dl.bintray.com/chaozhouzhang/maven' }
        //模块事件分发器 maven仓库地址
        maven { url 'https://dl.bintray.com/shijingfeng2019/module_event_dispatcher/' }
    }
    dependencies {
        // Android 插件
        classpath 'com.android.tools.build:gradle:4.0.2'
        // Kotlin 插件
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        // ARouter 使用 Gradle 插件实现路由表的自动加载
        classpath "com.alibaba:arouter-register:1.0.2"
        // Realm 数据库 插件 版本 最新版本10.0.1(只支持Java, Kotlin不支持)
        //noinspection GradleDependency
        classpath "io.realm:realm-gradle-plugin:7.0.0"
        // 阿里云 emas-services插件
        classpath 'com.aliyun.ams:emas-services:1.0.1'
        // 模块事件分发器 Gradle Plugin
        classpath "com.shijingfeng.module_event_dispatcher:auto_gradle_plugin:1.0.0"
        // Android AspectJ (AspectJ对各个插件版本和依赖的包相关性很大，动不动就报错，生产环境的App慎用)
//        classpath 'com.hujiang.aspectjx:gradle-android-plugin-aspectjx:2.0.10'
        // 上传到Bintray远程仓库所需要的插件
        classpath 'com.github.panpf.bintray-publish:bintray-publish:1.0.0'
    }
}

// 会遍历所有的 Module(概念对应Gradle的 project)
subprojects { sub ->
    // 项目本身需要的依赖仓库
    repositories {
        google()
        jcenter()
        maven { url "https://jitpack.io" }
        maven { url "https://maven.aliyun.com/nexus/content/repositories/releases" }
        maven { url 'https://dl.bintray.com/umsdk/release' }
        maven { url 'http://oss.jfrog.org/artifactory/oss-snapshot-local' }
        maven { url "http://maven.aliyun.com/nexus/content/repositories/releases" }
        //Bmob的maven仓库地址--必填
        maven { url 'https://dl.bintray.com/chaozhouzhang/maven' }
        //模块事件分发器 maven仓库地址
        maven { url 'https://dl.bintray.com/shijingfeng2019/module_event_dispatcher/' }
    }
    //在project进行配置前调用，child project必须在root project中设置才会生效，root project必须在settings.gradle中设置才会生效
    sub.beforeEvaluate { pjt ->
        println("模块 $pjt.name 开始配置")
    }
    //在project配置完成后调用
    sub.afterEvaluate { pjt ->
        println("模块 $pjt.name 配置完成")
    }
    // 用于上传到Bintray
    tasks.withType(Javadoc) {
        // Java文档检查开启  true:开启  false:关闭
        enabled = true
        options {
            encoding "UTF-8"
            charSet 'UTF-8'
            links "http://docs.oracle.com/javase/8/docs/api"
        }
    }
}

// 会执行 Project(概念对应Gradle的 rootProject) 和 遍历所有的 Module(概念对应Gradle的 project)
allprojects {}

task clean(type: Delete) {
    delete rootProject.buildDir
}
